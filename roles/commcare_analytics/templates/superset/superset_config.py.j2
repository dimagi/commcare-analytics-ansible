from flask_appbuilder.security.manager import AUTH_DB, AUTH_OAUTH
from superset_patchup.oauth import CustomSecurityManager

# The SQLAlchemy connection string.
SQLALCHEMY_DATABASE_URI = 'postgresql://{{ default_db_user }}:{{ default_db_password }}@{{ default_db_host }}:{{ default_db_port }}/{{ superset_db_name }}'
PUBLIC_ROLE_LIKE_GAMMA = True
MAPBOX_API_KEY = 'mapbox_api_key'

# ----------------------------------------------------
# AUTHENTICATION CONFIG
# ----------------------------------------------------
# The authentication type
# AUTH_OID : Is for OpenID
# AUTH_DB : Is for database (username/password()
# AUTH_LDAP : Is for LDAP
# AUTH_OAUTH : Is for oAuth
# AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
AUTH_TYPE = {{ superset_auth_type }}

{% if superset_oauth_providers %}
OAUTH_PROVIDERS = [
{% for provider in superset_oauth_providers %}
{
    'name': '{{ provider.name }}',
    'icon': '{{ provider.icon }}',
    {% if provider.token_key is defined %}
    'token_key': '{{ provider.token_key }}',
    {% endif %}
    'remote_app': {
        {% if provider.consumer_key is defined %}
        'consumer_key': {{ provider.consumer_key }},
        'consumer_secret': {{ provider.consumer_secret }},
        {% endif %}
        {% if provider.client_id is defined %}
        'client_id': {{ provider.client_id }},
        'client_secret': {{ provider.client_secret }},
        {% endif %}
        {% if provider.api_base_url is defined %}
        'api_base_url': '{{ provider.api_base_url }}',
        {% endif %}
        {% if provider.base_url is defined %}
        'base_url': '{{ provider.base_url }}',
        {% endif %}
        {% if provider.client_kwargs is defined %}
        # if provided this should be a python dict
        'client_kwargs': {{ provider.client_kwargs }},
        {% endif %}
        {% if provider.request_token_params is defined %}
        # if provided this should be a python dict
        'request_token_params': {{ provider.request_token_params }},
        {% endif %}
        {% if provider.request_token_url is defined %}
        'request_token_url': '{{ provider.request_token_url }}',
        {% endif %}
        {% if provider.access_token_method is defined %}
        'access_token_method': '{{ provider.access_token_method }}',
        {% endif %}
        {% if provider.access_token_headers is defined %}
        # if provided this should be a python dict
        'access_token_headers': {{ provider.access_token_headers }},
        {% endif %}
        {% if provider.access_token_params is defined %}
        # if provided this should be a python dict
        'access_token_params': {{ provider.access_token_params }},
        {% endif %}
        {% if provider.custom_redirect_url is defined %}
        'custom_redirect_url': '{{ provider.custom_redirect_url }}',
        {% endif %}
        'access_token_url': '{{ provider.access_token_url }}',
        'authorize_url': '{{ provider.authorize_url }}'
    }
}{% if loop.index != loop.length %},{% endif %}
{% endfor %}
]

{% endif %}  # end superset_oauth_providers if block


# The default user self registration role
AUTH_USER_REGISTRATION_ROLE = '{{ superset_auth_user_registration_role }}'
# Enable automatic creation of user account after first time oauth is done successfully
AUTH_USER_REGISTRATION = {{ superset_auth_user_registration }}
# If we should replace ALL the user's roles each login, or only on registration
AUTH_ROLES_SYNC_AT_LOGIN = {{ superset_sync_roles_at_login }}

CUSTOM_SECURITY_MANAGER = CustomSecurityManager
