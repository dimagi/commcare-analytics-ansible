from cachelib.redis import RedisCache
from celery.schedules import crontab
from flask_appbuilder.security.manager import AUTH_OAUTH, AUTH_DB

from hq_superset import flask_app_mutator, oauth
from hq_superset.const import OAUTH2_DATABASE_NAME


SQLALCHEMY_DATABASE_URI = 'postgresql://{{ default_db_user }}:{{ default_db_password }}@{{ default_db_host }}:{{ default_db_port }}/{{ superset_db_name }}'
SQLALCHEMY_BINDS = {
    OAUTH2_DATABASE_NAME: 'postgresql://{{ default_db_user }}:{{ default_db_password }}@{{ default_db_host }}:{{ default_db_port }}/{{ oauth2_db_name }}'
}
HQ_DATABASE_URI = 'postgresql://{{ default_db_user }}:{{ default_db_password }}@{{ default_db_host }}:{{ default_db_port }}/{{ cchq_db_name }}'

SECRET_KEY = "{{ vault_superset_secret_key }}"
FERNET_KEYS = [
    "{{ vault_superset_fernet_key }}",
]

AUTH_TYPE = {{ superset_auth_type }}

OAUTH_PROVIDERS = [
    {
        'name': 'commcare',
        'token_key':'{{ oauth_creds.token_key }}',
        'remote_app': {
            'client_id': '{{ oauth_creds.client_id }}',
            'client_secret': '{{ oauth_creds.client_secret }}',
            'api_base_url': '{{ oauth_creds.base_url }}',
            'access_token_url': '{{ oauth_creds.base_url }}oauth/token/',
            'authorize_url': '{{ oauth_creds.base_url }}oauth/authorize/',
            'client_kwargs':{
                'scope': 'reports:view access_apis'
            },
        }
    }
]

# Will allow user self registration, allowing to create Flask users from Authorized User
AUTH_USER_REGISTRATION = True

# The default user self registration role
AUTH_USER_REGISTRATION_ROLE = "Gamma"

SUPERSET_WEBSERVER_ADDRESS = "{{ superset_public_host }}"

AUTH_USER_ADDITIONAL_ROLES = ["sql_lab"]

MAPBOX_API_KEY = "{{ vault_mapbox_api_key }}"

FEATURE_FLAGS = {
    "DASHBOARD_CROSS_FILTERS": True,
    "DASHBOARD_NATIVE_FILTERS": True,
    "DASHBOARD_NATIVE_FILTERS_SET": True,
    "DASHBOARD_FILTERS_EXPERIMENTAL": True,
    "ENABLE_JAVASCRIPT_CONTROLS": True,
    "ENABLE_TEMPLATE_PROCESSING": True
}

# This is where async UCR imports are stored temporarily
SHARED_DIR = '{{ superset_shared_dir }}'

_REDIS_URL = 'redis://localhost:6379/0'
_RABBITMQ_URL = 'amqp://{{ rabbitmq_user }}:{{ rabbitmq_password }}@localhost:5672/commcare_analytics'

CACHE_CONFIG = {
      'CACHE_TYPE': 'RedisCache',
      'CACHE_DEFAULT_TIMEOUT': 300,
      'CACHE_KEY_PREFIX': 'superset_',
      'CACHE_REDIS_URL': _REDIS_URL
}

RESULTS_BACKEND = RedisCache(
    host='localhost', port=6379, key_prefix='superset_results'
)


class CeleryConfig(object):
    accept_content = ['pickle', 'application/json']
    broker_url = _RABBITMQ_URL
    imports = (
        'superset.sql_lab',
        'superset.tasks',
        'hq_superset.tasks',
    )
    result_backend = _REDIS_URL
    worker_log_level = 'DEBUG'
    worker_prefetch_multiplier = 10
    task_acks_late = True
    task_annotations = {
        'sql_lab.get_sql_results': {
            'rate_limit': '100/s',
        },
        'email_reports.send': {
            'rate_limit': '1/s',
            'time_limit': 120,
            'soft_time_limit': 150,
            'ignore_result': True,
        },
    }
    beat_schedule = {
        # example:
        # 'email_reports.schedule_hourly': {
        #     'task': 'email_reports.schedule_hourly',
        #     'schedule': crontab(minute=1, hour='*'),
        # }
        'delete_redundant_shared_files': {
            'task': 'delete_redundant_shared_files',
            'schedule': crontab(hour='0', minute='0')
        }
    }

CELERY_CONFIG = CeleryConfig

LANGUAGES = {
   'en': {'flag':'us', 'name':'English'},
   'pt': {'flag':'pt', 'name':'Portuguese'},
   'fr': {'flag':'fr', 'name':'French'},
}

# CommCare Analytics extensions
FLASK_APP_MUTATOR = flask_app_mutator
CUSTOM_SECURITY_MANAGER = oauth.CommCareSecurityManager

TALISMAN_CONFIG = {
    "content_security_policy": {
        "base-uri": ["'self'"],
        "default-src": ["'self'"],
        "img-src": [
            "'self'",
            "blob:",
            "data:",
            "https://apachesuperset.gateway.scarf.sh",
            "https://static.scarf.sh/",
            "*",
        ],
        "worker-src": ["'self'", "blob:"],
        "connect-src": [
            "'self'",
            "https://api.mapbox.com",
            "https://events.mapbox.com",
            "https://www.integralglobal.net",
        ],
        "object-src": "'none'",
        "style-src": [
            "'self'",
            "'unsafe-inline'",
            "https://fonts.googleapis.com",
        ],
        "font-src": ["'self'", "https://fonts.gstatic.com"],
        "script-src": ["'self'", "'unsafe-eval'"],
    },
    "content_security_policy_nonce_in": ["script-src"],
    "force_https": False,
    "session_cookie_secure": False,
}

USER_DOMAIN_ROLE_EXPIRY = 60 # minutes
SKIP_DATASET_CHANGE_FOR_DOMAINS = []

# Used for datadog monitoring
SERVER_ENVIRONMENT = "{{ datadog.hostname }}"  # staging, production, etc.
